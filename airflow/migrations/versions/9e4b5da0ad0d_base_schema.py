#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""base schema

Revision ID: 9e4b5da0ad0d
Revises: 
Create Date: 2019-10-17 16:45:26.636472

"""

# revision identifiers, used by Alembic.
revision = '9e4b5da0ad0d'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
import airflow.utils.sqlalchemy as aus 


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('connection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('conn_id', sa.String(length=250), nullable=True),
    sa.Column('conn_type', sa.String(length=500), nullable=True),
    sa.Column('host', sa.String(length=500), nullable=True),
    sa.Column('schema', sa.String(length=500), nullable=True),
    sa.Column('login', sa.String(length=500), nullable=True),
    sa.Column('password', sa.String(length=5000), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=True),
    sa.Column('is_extra_encrypted', sa.Boolean(), nullable=True),
    sa.Column('extra', sa.String(length=5000), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dag',
    sa.Column('dag_id', sa.String(length=250), nullable=False),
    sa.Column('is_paused', sa.Boolean(), nullable=True),
    sa.Column('is_subdag', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_scheduler_run', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('last_pickled', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('last_expired', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('scheduler_lock', sa.Boolean(), nullable=True),
    sa.Column('pickle_id', sa.Integer(), nullable=True),
    sa.Column('fileloc', sa.String(length=2000), nullable=True),
    sa.Column('owners', sa.String(length=2000), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('default_view', sa.String(length=25), nullable=True),
    sa.Column('schedule_interval', aus.Interval(), nullable=True),
    sa.PrimaryKeyConstraint('dag_id')
    )
    op.create_table('dag_pickle',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pickle', sa.PickleType(), nullable=True),
    sa.Column('created_dttm', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('pickle_hash', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dag_run',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dag_id', sa.String(length=250), nullable=True),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('start_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('end_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('state', sa.String(length=50), nullable=True),
    sa.Column('run_id', sa.String(length=250), nullable=True),
    sa.Column('external_trigger', sa.Boolean(), nullable=True),
    sa.Column('conf', sa.PickleType(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('dag_id', 'execution_date'),
    sa.UniqueConstraint('dag_id', 'run_id')
    )
    op.create_index('dag_id_state', 'dag_run', ['dag_id', 'state'], unique=False)
    op.create_table('import_error',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('filename', sa.String(length=1024), nullable=True),
    sa.Column('stacktrace', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('known_event_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('know_event_type', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('kube_resource_version',
    sa.Column('one_row_id', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('resource_version', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('one_row_id')
    )
    op.create_table('kube_worker_uuid',
    sa.Column('one_row_id', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('worker_uuid', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('one_row_id')
    )
    op.create_table('log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dttm', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('dag_id', sa.String(length=250), nullable=True),
    sa.Column('task_id', sa.String(length=250), nullable=True),
    sa.Column('event', sa.String(length=30), nullable=True),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('owner', sa.String(length=500), nullable=True),
    sa.Column('extra', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_log_dag', 'log', ['dag_id'], unique=False)
    op.create_table('sla_miss',
    sa.Column('task_id', sa.String(length=250), nullable=False),
    sa.Column('dag_id', sa.String(length=250), nullable=False),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('email_sent', sa.Boolean(), nullable=True),
    sa.Column('timestamp', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notification_sent', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('task_id', 'dag_id', 'execution_date')
    )
    op.create_index('sm_dag', 'sla_miss', ['dag_id'], unique=False)
    op.create_table('slot_pool',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pool', sa.String(length=50), nullable=True),
    sa.Column('slots', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('pool')
    )
    op.create_table('task_fail',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.String(length=250), nullable=False),
    sa.Column('dag_id', sa.String(length=250), nullable=False),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('start_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('end_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_fail_dag_task_date', 'task_fail', ['dag_id', 'task_id', 'execution_date'], unique=False)
    op.create_table('task_instance',
    sa.Column('task_id', sa.String(length=250), nullable=False),
    sa.Column('dag_id', sa.String(length=250), nullable=False),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('start_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('end_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('state', sa.String(length=20), nullable=True),
    sa.Column('try_number', sa.Integer(), nullable=True),
    sa.Column('max_tries', sa.Integer(), nullable=True),
    sa.Column('hostname', sa.String(length=1000), nullable=True),
    sa.Column('unixname', sa.String(length=1000), nullable=True),
    sa.Column('job_id', sa.Integer(), nullable=True),
    sa.Column('pool', sa.String(length=50), nullable=False),
    sa.Column('queue', sa.String(length=256), nullable=True),
    sa.Column('priority_weight', sa.Integer(), nullable=True),
    sa.Column('operator', sa.String(length=1000), nullable=True),
    sa.Column('queued_dttm', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('pid', sa.Integer(), nullable=True),
    sa.Column('executor_config', sa.PickleType(), nullable=True),
    sa.PrimaryKeyConstraint('task_id', 'dag_id', 'execution_date')
    )
    op.create_index('ti_dag_date', 'task_instance', ['dag_id', 'execution_date'], unique=False)
    op.create_index('ti_dag_state', 'task_instance', ['dag_id', 'state'], unique=False)
    op.create_index('ti_job_id', 'task_instance', ['job_id'], unique=False)
    op.create_index('ti_pool', 'task_instance', ['pool', 'state', 'priority_weight'], unique=False)
    op.create_index('ti_state', 'task_instance', ['state'], unique=False)
    op.create_index('ti_state_lkp', 'task_instance', ['dag_id', 'task_id', 'execution_date', 'state'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.String(length=10), nullable=False),
    sa.Column('username', sa.String(length=250), nullable=True),
    sa.Column('email', sa.String(length=500), nullable=True),
    sa.Column('superuser', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('variable',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=250), nullable=True),
    sa.Column('val', sa.Text(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key')
    )
    op.create_table('xcom',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=512), nullable=True),
    sa.Column('value', sa.LargeBinary(), nullable=True),
    sa.Column('timestamp', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('task_id', sa.String(length=250), nullable=False),
    sa.Column('dag_id', sa.String(length=250), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_xcom_dag_task_date', 'xcom', ['dag_id', 'task_id', 'execution_date'], unique=False)
    op.create_table('chart',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=200), nullable=True),
    sa.Column('conn_id', sa.String(length=250), nullable=False),
    sa.Column('user_id', sa.String(length=10), nullable=True),
    sa.Column('chart_type', sa.String(length=100), nullable=True),
    sa.Column('sql_layout', sa.String(length=50), nullable=True),
    sa.Column('sql', sa.Text(), nullable=True),
    sa.Column('y_log_scale', sa.Boolean(), nullable=True),
    sa.Column('show_datatable', sa.Boolean(), nullable=True),
    sa.Column('show_sql', sa.Boolean(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('default_params', sa.String(length=5000), nullable=True),
    sa.Column('x_is_date', sa.Boolean(), nullable=True),
    sa.Column('iteration_no', sa.Integer(), nullable=True),
    sa.Column('last_modified', aus.UtcDateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('known_event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=200), nullable=True),
    sa.Column('start_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('end_date', aus.UtcDateTime(timezone=True), nullable=True),
    sa.Column('user_id', sa.String(length=10), nullable=True),
    sa.Column('known_event_type_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['known_event_type_id'], ['known_event_type.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task_reschedule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.String(length=250), nullable=False),
    sa.Column('dag_id', sa.String(length=250), nullable=False),
    sa.Column('execution_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('try_number', sa.Integer(), nullable=False),
    sa.Column('start_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('end_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('reschedule_date', aus.UtcDateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['task_id', 'dag_id', 'execution_date'], ['task_instance.task_id', 'task_instance.dag_id', 'task_instance.execution_date'], name='task_reschedule_dag_task_date_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_reschedule_dag_task_date', 'task_reschedule', ['dag_id', 'task_id', 'execution_date'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_task_reschedule_dag_task_date', table_name='task_reschedule')
    op.drop_table('task_reschedule')
    op.drop_table('known_event')
    op.drop_table('chart')
    op.drop_index('idx_xcom_dag_task_date', table_name='xcom')
    op.drop_table('xcom')
    op.drop_table('variable')
    op.drop_table('users')
    op.drop_index('ti_state_lkp', table_name='task_instance')
    op.drop_index('ti_state', table_name='task_instance')
    op.drop_index('ti_pool', table_name='task_instance')
    op.drop_index('ti_job_id', table_name='task_instance')
    op.drop_index('ti_dag_state', table_name='task_instance')
    op.drop_index('ti_dag_date', table_name='task_instance')
    op.drop_table('task_instance')
    op.drop_index('idx_task_fail_dag_task_date', table_name='task_fail')
    op.drop_table('task_fail')
    op.drop_table('slot_pool')
    op.drop_index('sm_dag', table_name='sla_miss')
    op.drop_table('sla_miss')
    op.drop_index('idx_log_dag', table_name='log')
    op.drop_table('log')
    op.drop_table('kube_worker_uuid')
    op.drop_table('kube_resource_version')
    op.drop_table('known_event_type')
    op.drop_table('import_error')
    op.drop_index('dag_id_state', table_name='dag_run')
    op.drop_table('dag_run')
    op.drop_table('dag_pickle')
    op.drop_table('dag')
    op.drop_table('connection')
    # ### end Alembic commands ###
